@tailwind base;
@tailwind components;
@tailwind utilities;




.list-icon::before{
    content: '✔︎';
    padding: 0 10px 0 0;
}


/* /* width */
/* ::-webkit-scrollbar {
    width: 10px;

} */

/* Track */
/* ::-webkit-scrollbar-track {
    background: #f1f1f1;
} */

/* Handle */
/* ::-webkit-scrollbar-thumb {
    background: red;
} */

/* Handle on hover */
/* ::-webkit-scrollbar-thumb:hover {
    background: #555;
}  */

html {
    scroll-behavior: smooth;
}


/*

CSS HEART animation
*/

.heart {
    font-size: 6em;
    position: relative;
}

.heartbeat {
    position: relative;
    z-index: 1;
    animation: beat 2s linear infinite;
}

.heartecho {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    animation: echo 2s linear infinite;
}

@keyframes beat {
    0% {
        transform: scale(1);
    }
    14% {
        transform: scale(0.9);
    }
    21% {
        transform: scale(1.1) skew(0.004turn)
    }
    28% {
        transform: scale(1) skew(0.008turn);
    }
    35% {
        transform: scale(1) skew(0)
    }
}

@keyframes echo {
    0% {
        opacity: 0.5;
        transform: scale(1);
    }
    14% {
        opacity: 0.4;
        transform: scale(0.8);
    }
    21% {
        opacity: 0.4;
        transform: scale(1.1);
    }
    100% {
        opacity: 0;
        transform: scale(3);
    }
}

/*

CSS HEART animation
*/



/*

css btn shine

*/



.btn-shine{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
    padding: 12px 48px;
    color: #ffffff;
    background: linear-gradient(to right, #4d4d4d 0, white 10%, #4d4d4d 20%);
    background-position: 0;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: shine 3s infinite linear;
    animation-fill-mode: forwards;
    -webkit-text-size-adjust: none;
    font-weight: 600;
    font-size: 16px;
    text-decoration: none;
    white-space: nowrap;
}

@keyframes shine {
0%{
    background-position: 0;
}

60% {
    background-position: 180px
}

100% {
    background-position: 180px
}

}






/*
new back animation
*/


.bg-animation1 {
    --s: 25vmin;
    --p: calc(var(--s) / 2);
    --c1: pink;
    --c2: dodgerblue;
    --c3: white;
    --bg: var(--c3);
    --d: 6000ms;
    --e: cubic-bezier(0.76, 0, 0.24, 1);

    background-color: var(--bg);
    background-image:
            linear-gradient(45deg, var(--c1) 25%, transparent 25%),
            linear-gradient(-45deg, var(--c1) 25%, transparent 25%),
            linear-gradient(45deg, transparent 75%, var(--c2) 75%),
            linear-gradient(-45deg, transparent 75%, var(--c2) 75%);
    background-size: var(--s) var(--s);
    background-position:
            calc(var(--p) *  1) calc(var(--p) *  0),
            calc(var(--p) * -1) calc(var(--p) *  1),
            calc(var(--p) *  1) calc(var(--p) * -1),
            calc(var(--p) * -1) calc(var(--p) *  0);
    animation:
            color var(--d) var(--e) infinite,
            position var(--d) var(--e) infinite;
}

@keyframes color {
    0%, 25% {
        --bg: var(--c3);
    }
    26%, 50% {
        --bg: var(--c1);
    }
    51%, 75% {
        --bg: var(--c3);
    }
    76%, 100% {
        --bg: var(--c2);
    }
}

@keyframes position {
    0% {
        background-position:
                calc(var(--p) *  1) calc(var(--p) *  0),
                calc(var(--p) * -1) calc(var(--p) *  1),
                calc(var(--p) *  1) calc(var(--p) * -1),
                calc(var(--p) * -1) calc(var(--p) *  0);
    }
    25% {
        background-position:
                calc(var(--p) *  1) calc(var(--p) *  4),
                calc(var(--p) * -1) calc(var(--p) *  5),
                calc(var(--p) *  1) calc(var(--p) *  3),
                calc(var(--p) * -1) calc(var(--p) *  4);
    }
    50% {
        background-position:
                calc(var(--p) *  3) calc(var(--p) * 8),
                calc(var(--p) * -3) calc(var(--p) * 9),
                calc(var(--p) *  2) calc(var(--p) * 7),
                calc(var(--p) * -2) calc(var(--p) * 8);
    }
    75% {
        background-position:
                calc(var(--p) *  3) calc(var(--p) * 12),
                calc(var(--p) * -3) calc(var(--p) * 13),
                calc(var(--p) *  2) calc(var(--p) * 11),
                calc(var(--p) * -2) calc(var(--p) * 12);
    }
    100% {
        background-position:
                calc(var(--p) *  5) calc(var(--p) * 16),
                calc(var(--p) * -5) calc(var(--p) * 17),
                calc(var(--p) *  5) calc(var(--p) * 15),
                calc(var(--p) * -5) calc(var(--p) * 16);
    }
}

@media (prefers-reduced-motion) {
    body {
        animation: none;
    }
}

/*
new back animation
*/



/*
button flash animation


*/


.animated-flash-pulse {
    background-color: rgba(255, 255, 255, 0.12); /* Default background color */
    animation: flash 1.5s infinite; /* Animation timing and infinite repeat */
}

@keyframes flash {
    0%, 100% {
        background-color: rgba(200, 199, 199, 0.05); /* Start and end color */
    }
    50% {
        background-color: #1b1b1b; /* Flash to a darker blue */
    }
}

/* Base styles for the button */
.animated-stripe {
    background-color: #32CD32; /* Green background */
    position: relative;
    overflow: hidden; /* Ensure animation stays inside the button */
}

/* The white stripe element */
.animated-stripe::before {
    content: '';
    position: absolute;
    top: 0;
    left: -150%; /* Start off-screen to the left */
    width: 200%; /* Cover enough width for the animation to run smoothly */
    height: 100%; /* Match the button height */
    background: linear-gradient(45deg, transparent 40%, white 50%, transparent 60%);
    animation: stripe-slide 1.5s infinite linear;
}

/* Animation to move the stripe */
@keyframes stripe-slide {
    0% {
        transform: translateX(0%);
    }
    100% {
        transform: translateX(150%);
    }
}



/*
button flash animation


*/




/*Phone coutry select
*/


/* CSS variables. */
:root {
    --PhoneInput-color--focus: #03b2cb;
    --PhoneInputInternationalIconPhone-opacity: 0.8;
    --PhoneInputInternationalIconGlobe-opacity: 0.65;
    --PhoneInputCountrySelect-marginRight: 0.35em;
    --PhoneInputCountrySelectArrow-width: 0.3em;
    --PhoneInputCountrySelectArrow-marginLeft: var(--PhoneInputCountrySelect-marginRight);
    --PhoneInputCountrySelectArrow-borderWidth: 1px;
    --PhoneInputCountrySelectArrow-opacity: 0.45;
    --PhoneInputCountrySelectArrow-color: currentColor;
    --PhoneInputCountrySelectArrow-color--focus: var(--PhoneInput-color--focus);
    --PhoneInputCountrySelectArrow-transform: rotate(45deg);
    --PhoneInputCountryFlag-aspectRatio: 1.5;
    --PhoneInputCountryFlag-height: 1em;
    --PhoneInputCountryFlag-borderWidth: 1px;
    --PhoneInputCountryFlag-borderColor: rgba(0,0,0,0.5);
    --PhoneInputCountryFlag-borderColor--focus: var(--PhoneInput-color--focus);
    --PhoneInputCountryFlag-backgroundColor--loading: rgba(0,0,0,0.1);
}

.PhoneInput {
    /* This is done to stretch the contents of this component. */
    display: flex;
    align-items: center;
}

.PhoneInputInput {
    /* The phone number input stretches to fill all empty space */
    flex: 1;
    /* The phone number input should shrink
       to make room for the extension input */
    min-width: 0;
}

.PhoneInputCountryIcon {
    width: calc(var(--PhoneInputCountryFlag-height) * var(--PhoneInputCountryFlag-aspectRatio));
    height: var(--PhoneInputCountryFlag-height);
}

.PhoneInputCountryIcon--square {
    width: var(--PhoneInputCountryFlag-height);
}

.PhoneInputCountryIcon--border {
    /* Removed `background-color` because when an `<img/>` was still loading
       it would show a dark gray rectangle. */
    /* For some reason the `<img/>` is not stretched to 100% width and height
       and sometime there can be seen white pixels of the background at top and bottom. */
    background-color: var(--PhoneInputCountryFlag-backgroundColor--loading);
    /* Border is added via `box-shadow` because `border` interferes with `width`/`height`. */
    /* For some reason the `<img/>` is not stretched to 100% width and height
       and sometime there can be seen white pixels of the background at top and bottom,
       so an additional "inset" border is added. */
    box-shadow: 0 0 0 var(--PhoneInputCountryFlag-borderWidth) var(--PhoneInputCountryFlag-borderColor),
    inset 0 0 0 var(--PhoneInputCountryFlag-borderWidth) var(--PhoneInputCountryFlag-borderColor);
}

.PhoneInputCountryIconImg {
    /* Fixes weird vertical space above the flag icon. */
    /* https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/7#note_348586559 */
    display: block;
    /* 3rd party <SVG/> flag icons won't stretch if they have `width` and `height`.
       Also, if an <SVG/> icon's aspect ratio was different, it wouldn't fit too. */
    width: 100%;
    height: 100%;
}

.PhoneInputInternationalIconPhone {
    opacity: var(--PhoneInputInternationalIconPhone-opacity);
}

.PhoneInputInternationalIconGlobe {
    opacity: var(--PhoneInputInternationalIconGlobe-opacity);
}

/* Styling native country `<select/>`. */

.PhoneInputCountry {
    position: relative;
    align-self: stretch;
    display: flex;
    align-items: center;
    margin-right: var(--PhoneInputCountrySelect-marginRight);
}

.PhoneInputCountrySelect {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: 1;
    border: 0;
    opacity: 0;
    cursor: pointer;
}

.PhoneInputCountrySelect[disabled],
.PhoneInputCountrySelect[readonly] {
    cursor: default;
}

.PhoneInputCountrySelectArrow {
    display: block;
    content: '';
    width: var(--PhoneInputCountrySelectArrow-width);
    height: var(--PhoneInputCountrySelectArrow-width);
    margin-left: var(--PhoneInputCountrySelectArrow-marginLeft);
    border-style: solid;
    border-color: var(--PhoneInputCountrySelectArrow-color);
    border-top-width: 0;
    border-bottom-width: var(--PhoneInputCountrySelectArrow-borderWidth);
    border-left-width: 0;
    border-right-width: var(--PhoneInputCountrySelectArrow-borderWidth);
    transform: var(--PhoneInputCountrySelectArrow-transform);
    opacity: var(--PhoneInputCountrySelectArrow-opacity);
}

.PhoneInputCountrySelect:focus + .PhoneInputCountryIcon + .PhoneInputCountrySelectArrow {
    opacity: 1;
    color: var(--PhoneInputCountrySelectArrow-color--focus);
}

.PhoneInputCountrySelect:focus + .PhoneInputCountryIcon--border {
    box-shadow: 0 0 0 var(--PhoneInputCountryFlag-borderWidth) var(--PhoneInputCountryFlag-borderColor--focus),
    inset 0 0 0 var(--PhoneInputCountryFlag-borderWidth) var(--PhoneInputCountryFlag-borderColor--focus);
}

.PhoneInputCountrySelect:focus + .PhoneInputCountryIcon .PhoneInputInternationalIconGlobe {
    opacity: 1;
    color: var(--PhoneInputCountrySelectArrow-color--focus);
}

/*Phone coutry select
*/